// Code generated by "ohnogen -type=MyFabulousError -formatbase=16 -output=example_errors.go"; DO NOT EDIT.

package usage_without_ohno

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NotFound-100]
	_ = x[AlreadyExists-101]
	_ = x[Internal-102]
	_ = x[Unknown-103]
	_ = x[Busy-104]
	_ = x[Unauthorised-105]
	_ = x[Fatal-106]
}

const (
	_MyFabulousError_name      = "NotFoundAlreadyExistsInternalUnknownBusyUnauthorisedFatal"
	_MyFabulousError_desc_name = "I didn't find what you were looking for!I have this already!Its not you, its me :(I don't know what happenedI'm busy rn, can we do this later?You ain't got the creds to do thisHelp!!! Im dying!!!"
)

var (
	_MyFabulousError_index      = [...]uint8{0, 8, 21, 29, 36, 40, 52, 57}
	_MyFabulousError_desc_index = [...]uint8{0, 40, 60, 82, 108, 142, 176, 195}
)

// Returns the error name as string
func (i MyFabulousError) String() string {
	i -= 100
	if i < 0 || i >= MyFabulousError(len(_MyFabulousError_index)-1) {
		return "MyFabulousError(" + strconv.FormatInt(int64(i+100), 10) + ")"
	}
	return _MyFabulousError_name[_MyFabulousError_index[i]:_MyFabulousError_index[i+1]]
}

// Returns the description string
func (i MyFabulousError) Description() string {
	i -= 100
	if i < 0 || i >= MyFabulousError(len(_MyFabulousError_desc_index)-1) {
		return "MyFabulousError(" + strconv.FormatInt(int64(i+100), 10) + ")"
	}
	return _MyFabulousError_desc_name[_MyFabulousError_desc_index[i]:_MyFabulousError_desc_index[i+1]]
}

// Returns the error's string representation
// [CODE]PACKAGE_NAME.ERROR_NAME: DESCRIPTION
func (i MyFabulousError) Error() string {
	return "[" + i.Code() + "]" + i.Package() + "." + i.String() + ": " + i.Description()
}

// Returns the package name
func (i MyFabulousError) Package() string {
	return "usage_without_ohno"
}

// Returns the integer code string as per the format base provided
func (i MyFabulousError) Code() string {
	return "0x" + strconv.FormatInt(int64(i), 16)
}
